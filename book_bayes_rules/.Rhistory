library(brms)
install.packages("languageserver")
install.packages("httpgd")
install.packages("ggdag")
install.packages("dagitty")
library(nycflights13)
library(tidyverse)
flights |>
filter(dest == "IAH") |>
group_by(year, month, day) |>
summarize(
arr_delay = mean(arr_delay, na.rm=TRUE)
)
flights %>%
filter(dep_delay>120)
flights |>
filter(month==1 | month==2)
flights |>
filter(month %in% c(1,2))
jan1 <- flights |>
filter(month==1 & day==1)
jan1
flights |>
arrange(year, month, day, dep_time)
flights |>
arrange(desc(dep_delay))
flights |>
distinct(origin, dest, .keep_all = TRUE)
flights |>
count(origin, dest, sort=TRUE)
flights
flights |>
mutate(
gain = dep_delay - arr_delay,
speed = distance / air_time *60
)
flights |>
mutate(
gain = dep_delay - arr_delay,
speed = distance / air_time *60,
.before = 1
)
flights |>
mutate(
gain = dep_delay - arr_delay,
speed = distance / air_time *60,
.keep = "used"
)
flights |>
select(year, month, day)
flights |>
select(tailnum)
flights |>
select(tail_num = tailnum)
flights |>
select(ends_with("delay"))
flights |>
filter(dest == "IAH") |>
mutate(speed = distance / air_time * 60) |>
select(year:day, dep_time, carrier, flight, speed) |>
arrange(desc(speed))
mtcars %>%
group_by(cyl) %>%
summarize(n = n())
mtcars |>
group_by(cyl) |>
summarize(n = n())
flights |>
group_by(month)
flights |>
summarize(
avg_delay = mean(dep_delay)
)
flights |>
groupby(month) |>
summarize(
avg_delay = mean(dep_delay)
)
flights |>
group_by(month) |>
summarize(
avg_delay = mean(dep_delay)
)
flights |>
group_by(month) |>
summarize(
avg_delay = mean(dep_delay, na.rm=TRUE)
)
flights |>
group_by(month) |>
summarize(
delay = mean(dep_delay, na.rm=TRUE),
n = n()
)
flights |>
slice_max(arr_delay, n = 1)
flights |>
group_by(dest) |>
slice_max(arr_delay, n = 1) |>
relocate(dest)
daily <- flights |>
group_by(year, month, day)
daily
daily_flights <- daily |>
summarize(n = n())
daily_flights <- daily |>
summarize(n = n())
daily_flights
daily_flights <- daily |>
summarize(n = n(),
.groups = "drop_last")
daily_flights
install.packages("Lahman")
library(Lahman)
batters <- Lahman::Batting |>
group_by(playerID) |>
summarize(
performance = sum(H, na.rm=TRUE) / sum(AB, na.rm=TRUE),
n = sum(AB, na.rm=TRUE)
)
batters
batters |>
filter(n > 100) |>
ggplot(aes(x=n, y=performance)) +
geom_point(alpha=1/10) +
geom_smooth(se=FALSE)
install.packages("reticulate")
install.packages("bayesrules")
install.packages("tidybayes")
install.packages("broom.mixed")
library(reticulate)
R.version.string
update.packages(ask = FALSE, checkBuilt = TRUE)
install.packages("rprojroot")
install.packages("tidyverse")
install.packages("rstanarm")
install.packages("arm")
knitr::opts_chunk$set(message=FALSE, error=FALSE, warning=FALSE, comment=NA)
# switch this to TRUE to save figures in separate files
savefigs <- FALSE
library("rprojroot")
root<-has_file(".ROS-Examples-root")$make_fix_file()
library("rstanarm")
library("arm")
library("ggplot2")
library("bayesplot")
theme_set(bayesplot::theme_default(base_family = "sans"))
hibbs <- read.table(root("ElectionsEconomy/data","hibbs.dat"), header=TRUE)
head(hibbs)
if (savefigs) pdf(root("ElectionsEconomy/figs","hibbsdots.pdf"), height=4.5, width=7.5, colormodel="gray")
n <- nrow(hibbs)
par(mar=c(0,0,1.2,0))
left <- -.3
right <- -.28
center <- -.07
f <- .17
plot(c(left-.31,center+.23), c(-3.3,n+3), type="n", bty="n", xaxt="n", yaxt="n", xlab="", ylab="", xaxs="i", yaxs="i")
mtext("Forecasting elections from the economy", 3, 0, cex=1.2)
with(hibbs, {
for (i in 1:n){
ii <- order(growth)[i]
text(left-.3, i, paste (inc_party_candidate[ii], " vs. ", other_candidate[ii], " (", year[ii], ")", sep=""), adj=0, cex=.8)
points(center+f*(vote[ii]-50)/10, i, pch=20)
if (i>1){
if (floor(growth[ii]) != floor(growth[order(growth)[i-1]])){
lines(c(left-.3,center+.22), rep(i-.5,2), lwd=.5, col="darkgray")
}
}
}
})
lines(center+f*c(-.65,1.3), rep(0,2), lwd=.5)
for (tick in seq(-.5,1,.5)){
lines(center + f*rep(tick,2), c(0,-.2), lwd=.5)
text(center + f*tick, -.5, paste(50+10*tick,"%",sep=""), cex=.8)
}
lines(rep(center,2), c(0,n+.5), lty=2, lwd=.5)
text(center+.05, n+1.5, "Incumbent party's share of the popular vote", cex=.8)
lines(c(center-.088,center+.19), rep(n+1,2), lwd=.5)
text(right, n+1.5, "Income growth", adj=.5, cex=.8)
lines(c(right-.05,right+.05), rep(n+1,2), lwd=.5)
text(right, 16.15, "more than 4%", cex=.8)
text(right, 14, "3% to 4%", cex=.8)
text(right, 10.5, "2% to 3%", cex=.8)
text(right, 7, "1% to 2%", cex=.8)
text(right, 3.5, "0% to 1%", cex=.8)
text(right, .85, "negative", cex=.8)
text(left-.3, -2.3, "Above matchups are all listed as incumbent party's candidate vs.\ other party's candidate.\nIncome growth is a weighted measure over the four years preceding the election.  Vote share excludes third parties.", adj=0, cex=.7)
if (savefigs) dev.off()
if (savefigs) pdf(root("ElectionsEconomy/figs","hibbsscatter.pdf"), height=4.5, width=5, colormodel="gray")
par(mar=c(3,3,2,.1), mgp=c(1.7,.5,0), tck=-.01)
plot(c(-.7, 4.5), c(43,63), type="n", xlab="Avg recent growth in personal income", ylab="Incumbent party's vote share", xaxt="n", yaxt="n", mgp=c(2,.5,0), main="Forecasting the election from the economy      ", bty="l")
axis(1, 0:4, paste(0:4,"%",sep=""), mgp=c(2,.5,0))
axis(2, seq(45,60,5), paste(seq(45,60,5),"%",sep=""), mgp=c(2,.5,0))
with(hibbs, text(growth, vote, year, cex=.8))
abline(50, 0, lwd=.5, col="gray")
if (savefigs) dev.off()
M1 <- stan_glm(vote ~ growth, data = hibbs, refresh = 0)
print(M1)
prior_summary(M1)
summary(M1)
round(posterior_interval(M1),1)
if (savefigs) pdf(root("ElectionsEconomy/figs","hibbsline.pdf"), height=4.5, width=5, colormodel="gray")
par(mar=c(3,3,2,.1), mgp=c(1.7,.5,0), tck=-.01)
plot(c(-.7, 4.5), c(43,63), type="n", xlab="Average recent growth in personal income", ylab="Incumbent party's vote share", xaxt="n", yaxt="n", mgp=c(2,.5,0), main="Data and linear fit", bty="l")
axis(1, 0:4, paste(0:4,"%",sep=""), mgp=c(2,.5,0))
axis(2, seq(45,60,5), paste(seq(45,60,5),"%",sep=""), mgp=c(2,.5,0))
with(hibbs, points(growth, vote, pch=20))
abline(50, 0, lwd=.5, col="gray")
abline(coef(M1), col="gray15")
text(2.7, 53.5, paste("y =", fround(coef(M1)[1],1), "+", fround(coef(M1)[2],1), "x"), adj=0, col="gray15")
if (savefigs) dev.off()
if (savefigs) pdf(root("ElectionsEconomy/figs","hibbspredict.pdf"), height=3.5, width=6.5, colormodel="gray")
par(mar=c(3,3,3,1), mgp=c(1.7,.5,0), tck=-.01)
mu <- 52.3
sigma <- 3.9
curve (dnorm(x,mu,sigma), ylim=c(0,.103), from=35, to=70, bty="n",
xaxt="n", yaxt="n", yaxs="i",
xlab="Clinton share of the two-party vote", ylab="",
main="Probability forecast of Hillary Clinton vote share in 2016,\nbased on 2% rate of economic growth", cex.main=.9)
x <- seq (50,65,.1)
polygon(c(min(x),x,max(x)), c(0,dnorm(x,mu,sigma),0),
col="darkgray", border="black")
axis(1, seq(40,65,5), paste(seq(40,65,5),"%",sep=""))
text(50.7, .025, "Predicted\n72% chance\nof Clinton victory", adj=0)
if (savefigs) dev.off()
if (savefigs) pdf(root("ElectionsEconomy/figs","hibbsline2a.pdf"), height=4.5, width=5, colormodel="gray")
par(mar=c(3,3,2,.1), mgp=c(1.7,.5,0), tck=-.01)
plot(c(-.7, 4.5), c(43,63), type="n", xlab="x", ylab="y", xaxt="n", yaxt="n", mgp=c(2,.5,0), main="Data and linear fit", bty="l", cex.lab=1.3, cex.main=1.3)
axis(1, 0:4, cex.axis=1.3)
axis(2, seq(45, 60, 5), cex.axis=1.3)
abline(coef(M1), col="gray15")
with(hibbs, points(growth, vote, pch=20))
text(2.7, 53.5, paste("y =", fround(coef(M1)[1],1), "+", fround(coef(M1)[2],1), "x"), adj=0, col="gray15", cex=1.3)
if (savefigs) dev.off()
if (savefigs) pdf(root("ElectionsEconomy/figs","hibbsline2b.pdf"), height=4.5, width=5, colormodel="gray")
par(mar=c(3,3,2,.1), mgp=c(1.7,.5,0), tck=-.01)
plot(c(-.7, 4.5), c(43,63), type="n", xlab="x", ylab="y", xaxt="n", yaxt="n", mgp=c(2,.5,0), main="Data and range of possible linear fits", bty="l", cex.lab=1.3, cex.main=1.3)
axis(1, 0:4, cex.axis=1.3)
axis(2, seq(45, 60, 5), cex.axis=1.3)
sims <- as.matrix(M1)
n_sims <- nrow(sims)
for (s in sample(n_sims, 50))
abline(sims[s,1], sims[s,2], col="gray50", lwd=0.5)
with(hibbs, points(growth, vote, pch=20))
setwd("~/GithubRepos/biwp/book_bayes_rules")
#| echo: false
#| output: false
# Load packages
library(bayesrules)
library(tidyverse)
library(janitor)
# Import article data
data(fake_news)
fake_news %>%
tabyl(type) %>%
adorn_totals("row")
fake_news %>%
tabyl(title_has_excl, type) %>%
adorn_totals("row")
# Define possible articles
article <- data.frame(type = c("real", "fake"))
# Define the prior model
prior <- c(0.6, 0.4)
# Simulate 3 articles
sample_n(article, size = 3, weight = prior, replace = TRUE)
# Set the seed. Simulate 3 articles.
set.seed(84735)
sample_n(article, size = 3, weight = prior, replace = TRUE)
# Simulate 10000 articles.
set.seed(84735)
article_sim <- sample_n(article, size = 10000,
weight = prior, replace = TRUE)
ggplot(article_sim, aes(x = type)) +
geom_bar()
article_sim %>%
tabyl(type) %>%
adorn_totals()
article_sim <- article_sim %>%
mutate(data_model = case_when(type == "fake" ~ 0.2667,
type == "real" ~ 0.0222))
glimpse(article_sim)
# Define whether there are exclamation points
data <- c("no", "yes")
# Simulate exclamation point usage
set.seed(3)
article_sim <- article_sim %>%
group_by(1:n()) %>%
mutate(usage = sample(data, size=1,
prob = c(1 - data_model, data_model)))
article_sim %>%
tabyl(usage, type) %>%
adorn_totals(c("col", "row"))
ggplot(article_sim, aes(x = type, fill = usage)) +
geom_bar(position = "fill")
ggplot(article_sim, aes(x = usage)) +
geom_bar()
article_sim %>%
filter(usage == "yes") %>%
tabyl(type) %>%
adorn_totals("row")
ggplot(article_sim, aes(x = type)) +
geom_bar() +
facet_wrap(~ usage)
# Load the data
data(pop_vs_soda)
# Summarize pop use by region
pop_vs_soda %>%
tabyl(pop, region) %>%
adorn_percentages("col")
pop_vs_soda %>%
tabyl(pop) %>%
adorn_percentages("col")
0.6447*0.21 + 0.2734*0.17 + 0.0792*0.38 + 0.2943*0.24
0.38*0.0792/0.282593
# Define possible win probabilities
chess <- data.frame(pi = c(0.2, 0.5, 0.8))
# Define the prior model
prior <- c(0.10, 0.25, 0.65)
# Simulate 10000 values of pi from the prior
set.seed(84735)
chess_sim <- sample_n(chess, size = 10000, weight = prior, replace = TRUE)
# Simulate 10000 match outcomes
chess_sim <- chess_sim %>%
mutate(y = rbinom(10000, size = 6, prob = pi))
# Check it out
chess_sim %>%
head(3)
#Summarize the prior
chess_sim %>%
tabyl(pi) %>%
adorn_totals("row")
# Plot y by pi
ggplot(chess_sim, aes(x = y)) +
stat_count(aes(y = after_stat(prop))) +
facet_wrap(~ pi)
