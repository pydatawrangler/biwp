---
title: "02_br_chap02"
format: 
  html:
    self-contained: true
    number-sections: true
editor_options: 
  chunk_output_type: console
---

```{r}
#| echo: false
#| output: false
# Load packages
library(bayesrules)
library(tidyverse)
library(janitor)
```

```{r}
# Import article data
data(fake_news)

fake_news %>% 
  tabyl(type) %>% 
  adorn_totals("row")

fake_news %>% 
  tabyl(title_has_excl, type) %>% 
  adorn_totals("row")
```
For a broader probability introduction, we recommend that the interested reader visit Chapters 1 through 3 and Section 7.1 of Blitzstein, Joseph, and Jessica Hwang. 2019. Introduction to Probability. Second. Chapman & Hall / CRC Texts in Statistical Science. [Introduction to Probability](https://drive.google.com/file/d/1VmkAAGOYCTORq1wxSQqy255qLJjTNvBI/view)

## Building a Bayesian model for events

```{r}
# Define possible articles
article <- data.frame(type = c("real", "fake"))

# Define the prior model
prior <- c(0.6, 0.4)

# Simulate 3 articles
sample_n(article, size = 3, weight = prior, replace = TRUE)

# Set the seed. Simulate 3 articles.
set.seed(84735)
sample_n(article, size = 3, weight = prior, replace = TRUE)

# Simulate 10000 articles.
set.seed(84735)
article_sim <- sample_n(article, size = 10000,
                        weight = prior, replace = TRUE)

ggplot(article_sim, aes(x = type)) +
  geom_bar()

article_sim %>% 
  tabyl(type) %>% 
  adorn_totals()

article_sim <- article_sim %>% 
  mutate(data_model = case_when(type == "fake" ~ 0.2667,
                                type == "real" ~ 0.0222))

glimpse(article_sim)

# Define whether there are exclamation points
data <- c("no", "yes")

# Simulate exclamation point usage
set.seed(3)
article_sim <- article_sim %>%
  group_by(1:n()) %>% 
  mutate(usage = sample(data, size=1,
                        prob = c(1 - data_model, data_model)))

article_sim %>% 
  tabyl(usage, type) %>% 
  adorn_totals(c("col", "row"))

ggplot(article_sim, aes(x = type, fill = usage)) +
  geom_bar(position = "fill")
ggplot(article_sim, aes(x = usage)) +
  geom_bar()

article_sim %>% 
  filter(usage == "yes") %>% 
  tabyl(type) %>% 
  adorn_totals("row")

ggplot(article_sim, aes(x = type)) +
  geom_bar() +
  facet_wrap(~ usage)
```
## Example: Pop vs soda vs coke

```{r}
# Load the data
data(pop_vs_soda)

# Summarize pop use by region
pop_vs_soda %>% 
  tabyl(pop, region) %>% 
  adorn_percentages("col")

pop_vs_soda %>% 
  tabyl(pop) %>% 
  adorn_percentages("col")
```

$$L(M|A) = 0.6447, L(N|A) = 0.2734, L(S|A) = 0.0792, L(W|A) = 0.2943$$
$$P(A)=P(B)L(B|A)+P(Bc)L(Bc|A)$$

```{r}
0.6447*0.21 + 0.2734*0.17 + 0.0792*0.38 + 0.2943*0.24

0.38*0.0792/0.282593
```

## Building a Bayesian model for random variables

### Posterior simulation

```{r}
# Define possible win probabilities
chess <- data.frame(pi = c(0.2, 0.5, 0.8))

# Define the prior model
prior <- c(0.10, 0.25, 0.65)

# Simulate 10000 values of pi from the prior
set.seed(84735)
chess_sim <- sample_n(chess, size = 10000, weight = prior, replace = TRUE)

# Simulate 10000 match outcomes
chess_sim <- chess_sim %>% 
  mutate(y = rbinom(10000, size = 6, prob = pi))

# Check it out
chess_sim %>% 
  head(3)

#Summarize the prior
chess_sim %>% 
  tabyl(pi) %>% 
  adorn_totals("row")

# Plot y by pi
ggplot(chess_sim, aes(x = y)) +
  stat_count(aes(y = after_stat(prop))) +
  facet_wrap(~ pi)

```
FIGURE 2.9



